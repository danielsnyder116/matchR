options(shiny.fullstacktrace = TRUE)
options(shiny.port = 1993)
setwd("/Users/Daniel/Desktop/WEC/Shiny/matchR/rshiny")
source("R/global.R")
source("R/core_functions.R")
source("R/custom_ui_styling.R")
#Modules
source("./R/modules/view_profile/viewProfileServer.R")
source("./R/modules/view_profile/viewProfileUI.R")
source("Server.R")
source("UI.R")
app <- shinyApp(ui=ui, server=server)
runApp(launch.browser = TRUE)
#---------------------
#       APP.R
#---------------------
#Be sure to comment out any call of install.packages() when using shinyapps.io
#For whatever reason that causes errors
load_package <- function(package) {
#If package not installed, INSTALL FROM CRAN
#Then attach package
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org", quiet = TRUE)
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
#Otherwise attach package
else {
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
packages <- c("shiny", "shinyjs", "shinydashboard", "shinyFeedback",
"shinycssloaders", "DT", "dplyr", "readr", "lubridate",
"RSQLite", "dtplyr", "glue", "rsconnect", "shinyauthr")
sapply(packages, load_package)
# #SETUP FOR SHINYAPPS.IO
# #----------------------
# library(shiny)
# library(shinyjs)
# library(shinydashboard)
# library(DT)
# library(readr)
# library(RSQLite)
# library(glue)
# library(rsconnect)
options(shiny.fullstacktrace = TRUE)
options(shiny.port = 1993)
setwd("/Users/Daniel/Desktop/WEC/Shiny/matchR/rshiny")
source("R/global.R")
source("R/core_functions.R")
source("R/custom_ui_styling.R")
#Modules
source("./R/modules/view_profile/viewProfileServer.R")
source("./R/modules/view_profile/viewProfileUI.R")
source("Server.R")
source("UI.R")
app <- shinyApp(ui=ui, server=server)
runApp(launch.browser = TRUE)
#---------------------
#       APP.R
#---------------------
#Be sure to comment out any call of install.packages() when using shinyapps.io
#For whatever reason that causes errors
load_package <- function(package) {
#If package not installed, INSTALL FROM CRAN
#Then attach package
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org", quiet = TRUE)
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
#Otherwise attach package
else {
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
packages <- c("shiny", "shinyjs", "shinydashboard", "shinyFeedback",
"shinycssloaders", "DT", "dplyr", "readr", "lubridate",
"RSQLite", "dtplyr", "glue", "rsconnect", "shinyauthr")
sapply(packages, load_package)
# #SETUP FOR SHINYAPPS.IO
# #----------------------
# library(shiny)
# library(shinyjs)
# library(shinydashboard)
# library(DT)
# library(readr)
# library(RSQLite)
# library(glue)
# library(rsconnect)
options(shiny.fullstacktrace = TRUE)
options(shiny.port = 1993)
setwd("/Users/Daniel/Desktop/WEC/Shiny/matchR/rshiny")
source("R/global.R")
source("R/core_functions.R")
source("R/custom_ui_styling.R")
#Modules
source("./R/modules/view_profile/viewProfileServer.R")
source("./R/modules/view_profile/viewProfileUI.R")
source("Server.R")
source("UI.R")
app <- shinyApp(ui=ui, server=server)
runApp(launch.browser = TRUE)
#---------------------
#       APP.R
#---------------------
#Be sure to comment out any call of install.packages() when using shinyapps.io
#For whatever reason that causes errors
load_package <- function(package) {
#If package not installed, INSTALL FROM CRAN
#Then attach package
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org", quiet = TRUE)
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
#Otherwise attach package
else {
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
packages <- c("shiny", "shinyjs", "shinydashboard", "shinyFeedback",
"shinycssloaders", "DT", "dplyr", "readr", "lubridate",
"RSQLite", "dtplyr", "glue", "rsconnect", "shinyauthr")
sapply(packages, load_package)
# #SETUP FOR SHINYAPPS.IO
# #----------------------
# library(shiny)
# library(shinyjs)
# library(shinydashboard)
# library(DT)
# library(readr)
# library(RSQLite)
# library(glue)
# library(rsconnect)
options(shiny.fullstacktrace = TRUE)
options(shiny.port = 1993)
setwd("/Users/Daniel/Desktop/WEC/Shiny/matchR/rshiny")
source("R/global.R")
source("R/core_functions.R")
source("R/custom_ui_styling.R")
#Modules
source("./R/modules/view_profile/viewProfileServer.R")
source("./R/modules/view_profile/viewProfileUI.R")
source("Server.R")
source("UI.R")
app <- shinyApp(ui=ui, server=server)
runApp(launch.browser = TRUE)
id_input <- "12345678"
name_input <- "Danny Snyder"
type_input <- "Volunteer"
status_input <- "Active"
id_input <- "12345678"
name_input <- "Danny Snyder"
type_input <- "Volunteer"
status_input <- "Active"
paste0(id_input, "<br>",
name_input, "<br>",
type_input, "<br>",
status_input, "<br>")
paste0(id_input, "<br>",
name_input, "<br>",
type_input, "<br>",
status_input, "<br>")
html(paste0(id_input, "<br>",
name_input, "<br>",
type_input, "<br>",
status_input, "<br>"))
HTML(paste0(id_input, "<br>",
name_input, "<br>",
type_input, "<br>",
status_input, "<br>"))
HTML(paste0("ID:", id_input, "<br>",
"Name:", name_input, "<br>",
"Role:", type_input, "<br>",
"Status:", status_input, "<br>"))
tab_info <-  HTML(paste0("ID: ", id_input, "<br>",
"Name: ", name_input, "<br>",
"Role: ", type_input, "<br>",
"Status: ", status_input, "<br>"))
tab_info
source("R/core_functions.R")
values <- reactiveValues(id = "", name = "", role = "", status = "")
#---------------------
#       APP.R
#---------------------
#Be sure to comment out any call of install.packages() when using shinyapps.io
#For whatever reason that causes errors
load_package <- function(package) {
#If package not installed, INSTALL FROM CRAN
#Then attach package
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org", quiet = TRUE)
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
#Otherwise attach package
else {
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
packages <- c("shiny", "shinyjs", "shinydashboard", "shinyFeedback",
"shinycssloaders", "DT", "dplyr", "readr", "lubridate",
"RSQLite", "dtplyr", "glue", "rsconnect", "shinyauthr")
sapply(packages, load_package)
# #SETUP FOR SHINYAPPS.IO
# #----------------------
# library(shiny)
# library(shinyjs)
# library(shinydashboard)
# library(DT)
# library(readr)
# library(RSQLite)
# library(glue)
# library(rsconnect)
options(shiny.fullstacktrace = TRUE)
options(shiny.port = 1993)
setwd("/Users/Daniel/Desktop/WEC/Shiny/matchR/rshiny")
source("R/global.R")
source("R/core_functions.R")
source("R/custom_ui_styling.R")
#Modules
source("./R/modules/view_profile/viewProfileServer.R")
source("./R/modules/view_profile/viewProfileUI.R")
source("Server.R")
source("UI.R")
app <- shinyApp(ui=ui, server=server)
runApp(launch.browser = TRUE)
tables <- reactiveVal(NULL)
#---------------------
#       APP.R
#---------------------
#Be sure to comment out any call of install.packages() when using shinyapps.io
#For whatever reason that causes errors
load_package <- function(package) {
#If package not installed, INSTALL FROM CRAN
#Then attach package
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org", quiet = TRUE)
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
#Otherwise attach package
else {
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
packages <- c("shiny", "shinyjs", "shinydashboard", "shinyFeedback",
"shinycssloaders", "DT", "dplyr", "readr", "lubridate",
"RSQLite", "dtplyr", "glue", "rsconnect", "shinyauthr")
sapply(packages, load_package)
# #SETUP FOR SHINYAPPS.IO
# #----------------------
# library(shiny)
# library(shinyjs)
# library(shinydashboard)
# library(DT)
# library(readr)
# library(RSQLite)
# library(glue)
# library(rsconnect)
options(shiny.fullstacktrace = TRUE)
options(shiny.port = 1993)
setwd("/Users/Daniel/Desktop/WEC/Shiny/matchR/rshiny")
source("R/global.R")
source("R/core_functions.R")
source("R/custom_ui_styling.R")
#Modules
source("./R/modules/view_profile/viewProfileServer.R")
source("./R/modules/view_profile/viewProfileUI.R")
source("Server.R")
source("UI.R")
app <- shinyApp(ui=ui, server=server)
runApp(launch.browser = TRUE)
View(isolate(volunteers()))
View(volunteers)
#---------------------
#       APP.R
#---------------------
#Be sure to comment out any call of install.packages() when using shinyapps.io
#For whatever reason that causes errors
load_package <- function(package) {
#If package not installed, INSTALL FROM CRAN
#Then attach package
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org", quiet = TRUE)
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
#Otherwise attach package
else {
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
packages <- c("shiny", "shinyjs", "shinydashboard", "shinyFeedback",
"shinycssloaders", "DT", "dplyr", "readr", "lubridate",
"RSQLite", "dtplyr", "glue", "rsconnect", "shinyauthr")
sapply(packages, load_package)
# #SETUP FOR SHINYAPPS.IO
# #----------------------
# library(shiny)
# library(shinyjs)
# library(shinydashboard)
# library(DT)
# library(readr)
# library(RSQLite)
# library(glue)
# library(rsconnect)
options(shiny.fullstacktrace = TRUE)
options(shiny.port = 1993)
setwd("/Users/Daniel/Desktop/WEC/Shiny/matchR/rshiny")
source("R/global.R")
source("R/core_functions.R")
source("R/custom_ui_styling.R")
#Modules
source("./R/modules/view_profile/viewProfileServer.R")
source("./R/modules/view_profile/viewProfileUI.R")
source("Server.R")
source("UI.R")
app <- shinyApp(ui=ui, server=server)
runApp(launch.browser = TRUE)
#---------------------
#       APP.R
#---------------------
#Be sure to comment out any call of install.packages() when using shinyapps.io
#For whatever reason that causes errors
load_package <- function(package) {
#If package not installed, INSTALL FROM CRAN
#Then attach package
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org", quiet = TRUE)
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
#Otherwise attach package
else {
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
packages <- c("shiny", "shinyjs", "shinydashboard", "shinyFeedback",
"shinycssloaders", "DT", "dplyr", "readr", "lubridate",
"RSQLite", "dtplyr", "glue", "rsconnect", "shinyauthr")
sapply(packages, load_package)
# #SETUP FOR SHINYAPPS.IO
# #----------------------
# library(shiny)
# library(shinyjs)
# library(shinydashboard)
# library(DT)
# library(readr)
# library(RSQLite)
# library(glue)
# library(rsconnect)
options(shiny.fullstacktrace = TRUE)
options(shiny.port = 1993)
setwd("/Users/Daniel/Desktop/WEC/Shiny/matchR/rshiny")
source("R/global.R")
source("R/core_functions.R")
source("R/custom_ui_styling.R")
#Modules
source("./R/modules/view_profile/viewProfileServer.R")
source("./R/modules/view_profile/viewProfileUI.R")
source("Server.R")
source("UI.R")
app <- shinyApp(ui=ui, server=server)
runApp(launch.browser = TRUE)
#---------------------
#       APP.R
#---------------------
#Be sure to comment out any call of install.packages() when using shinyapps.io
#For whatever reason that causes errors
load_package <- function(package) {
#If package not installed, INSTALL FROM CRAN
#Then attach package
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org", quiet = TRUE)
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
#Otherwise attach package
else {
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
packages <- c("shiny", "shinyjs", "shinydashboard", "shinyFeedback",
"shinycssloaders", "DT", "dplyr", "readr", "lubridate",
"RSQLite", "dtplyr", "glue", "rsconnect", "shinyauthr")
sapply(packages, load_package)
# #SETUP FOR SHINYAPPS.IO
# #----------------------
# library(shiny)
# library(shinyjs)
# library(shinydashboard)
# library(DT)
# library(readr)
# library(RSQLite)
# library(glue)
# library(rsconnect)
options(shiny.fullstacktrace = TRUE)
options(shiny.port = 1993)
setwd("/Users/Daniel/Desktop/WEC/Shiny/matchR/rshiny")
source("R/global.R")
source("R/core_functions.R")
source("R/custom_ui_styling.R")
#Modules
source("./R/modules/view_profile/viewProfileServer.R")
source("./R/modules/view_profile/viewProfileUI.R")
source("Server.R")
source("UI.R")
app <- shinyApp(ui=ui, server=server)
runApp(launch.browser = TRUE)
print(isolate(values))
print(isolate(values#id))
enable(id = "view_vol_button")
enable(id = "view_stud_button")
})
# #STUDENT TABLE ROW CLICKED
# observeEvent(input$unmatched_stud_table_cells_selected, ignoreInit = TRUE, {
#
#   print("Foo")
#
#   row <- input$unmatched_vols_table_cells_selected
#   print(row)
#
#   #enable(id = "view_vol_button")
# })
#mechanism to check all of the open tabs
#If tab is in them, send a message
#Otherwise, create a new tab
#populate it with relevant details of individual
# #To see active tab within setpanel section (in this case, MATCHING)
# observeEvent(input$sidebar_tabs, {
#
#   if (input$sidebar_tabs == "sidebar_matching") {
#     print(glue("Current Tab: {input$setpanel_matching}"))
#   }
#
# })
# if (str_detect(input$setpanel, pattern = "this_tab|that_tab|another_tab")) {
# }
#
# else {
# }
#VIEW VOLUNTEER PROFILE
observeEvent(input$view_vol_button, ignoreInit = TRUE, {
print("Clicked view_vol_button")
#indiv_info <- make_profile_tab_info()
insertTab(inputId = "setpanel_matching",
tabPanel(title = "okay", #, indiv_info,
tabsetPanel(id="blah",
tabPanel("ONE"),
tabPanel("TWO"),
tabPanel("THREE"),
tabPanel("FOUR"),
)
)
)
viewProfileServer(id='viewVolProfile')
})
#VIEW STUDENT PROFILE
observeEvent(input$view_stud_button, ignoreInit = TRUE, {
print("Clicked view_stud_button")
#indiv_info <- make_profile_tab_info()
insertTab(inputId = "setpanel_matching",
tabPanel(title = "asdf", #indiv_info,
tabsetPanel(id="blah",
tabPanel("ONE"),
tabPanel("TWO"),
tabPanel("THREE"),
tabPanel("FOUR"),
)
)
)
viewProfileServer(id='viewStudProfile')
})
print(isolate(values$id))
#---------------------
#       APP.R
#---------------------
#Be sure to comment out any call of install.packages() when using shinyapps.io
#For whatever reason that causes errors
load_package <- function(package) {
#If package not installed, INSTALL FROM CRAN
#Then attach package
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org", quiet = TRUE)
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
#Otherwise attach package
else {
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
packages <- c("shiny", "shinyjs", "shinydashboard", "shinyFeedback",
"shinycssloaders", "DT", "dplyr", "readr", "lubridate",
"RSQLite", "dtplyr", "glue", "rsconnect", "shinyauthr")
sapply(packages, load_package)
# #SETUP FOR SHINYAPPS.IO
# #----------------------
# library(shiny)
# library(shinyjs)
# library(shinydashboard)
# library(DT)
# library(readr)
# library(RSQLite)
# library(glue)
# library(rsconnect)
options(shiny.fullstacktrace = TRUE)
options(shiny.port = 1993)
setwd("/Users/Daniel/Desktop/WEC/Shiny/matchR/rshiny")
source("R/global.R")
source("R/core_functions.R")
source("R/custom_ui_styling.R")
#Modules
source("./R/modules/view_profile/viewProfileServer.R")
source("./R/modules/view_profile/viewProfileUI.R")
source("Server.R")
source("UI.R")
app <- shinyApp(ui=ui, server=server)
runApp(launch.browser = TRUE)
